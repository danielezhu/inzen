The RenderMan Interface Specification, or RISpec in short, is an open API developed by Pixar Animation Studios to describe three-dimensional scenes and turn them into digital photorealistic images. It includes the RenderMan Shading Language.
As Pixar's technical specification for a standard communications protocol (or interface) between modeling programs and rendering programs capable of producing photorealistic-quality images, RISpec is a similar concept to PostScript but for describing 3D scenes rather than 2D page layouts. Thus, modelling programs which understand the RenderMan Interface protocol can send data to rendering software which implements the RenderMan Interface, without caring what rendering algorithms are utilized by the latter.
The interface was first published in 1988 (version 3.0) and was designed to be sufficiently future proof to encompass advances in technology for a significant number of years. The current revision is 3.2.1, released in November 2005.
What set the RISpec apart from other standards of the time was that it allowed using high-level geometric primitives, like quadrics or bicubic patches, to specify geometric primitives implicitly, rather than relying on a modeling application to generate polygons approximating these shapes explicitly beforehand. Another novelty introduced by the RISpec at the time was the specification of a shading language.
The RenderMan shading language allows material definitions of surfaces to be described not only by adjusting a small set of parameters, but in an arbitrarily complex fashion by using a C-like programming language to write shading procedures commonly known as procedural textures and shaders. Lighting, and displacements on the surface, are also programmable using the shading language. The shading language allows each statement to be executed in a SIMD manner, but does not insist on it. Another feature that sets renderers based on the RISpec apart from many other renderers is the ability to output arbitrary variables as an image: surface normals, separate lighting passes and pretty much anything else can be output from the renderer in a single pass.
RenderMan has much in common with OpenGL, despite the two APIs being targeted to different sets of users (OpenGL to real-time hardware-assisted rendering and RenderMan to photorealistic off-line rendering). Both APIs take the form of a stack-based state machine with (conceptually) immediate rendering of geometric primitives. It is possible to implement either API in terms of the other.