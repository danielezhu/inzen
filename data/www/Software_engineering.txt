

# Software engineering

From Wikipedia, the free encyclopedia

Jump to: navigation, search

**Software Engineering** is the application of engineering to the development
of software in a systematic method.[1][2][3]

## Contents

  * 1 Definitions
  * 2 History
  * 3 Subdisciplines
  * 4 Education
  * 5 Profession
    * 5.1 Employment
    * 5.2 Certification
    * 5.3 Impact of globalization
  * 6 Related fields
    * 6.1 Computer Science
  * 7 Controversy
    * 7.1 Over definition
    * 7.2 Criticism
  * 8 See also
  * 9 Notes
  * 10 References
  * 11 Further reading
  * 12 External links

## Definitions[edit]

Typical formal definitions of software engineering include:

  * "the systematic application of scientific and technological knowledge, methods, and experience to the design, implementation, testing, and documentation of software"—The Bureau of Labor Statistics—IEEE _Systems and software engineering - Vocabulary_[4]
  * "The application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software"—IEEE _Standard Glossary of Software Engineering Terminology_[5]
  * "an engineering discipline that is concerned with all aspects of software production"—Ian Sommerville[6]
  * "the establishment and use of sound engineering principles in order to economically obtain software that is reliable and works efficiently on real machines"—Fritz Bauer[7]

## History[edit]

Main article: History of software engineering

When the first digital computers appeared in the early 1940s,[8] the
instructions to make them operate were wired into the machine. Practitioners
quickly realized that this design was not flexible and came up with the
"stored program architecture" or von Neumann architecture. Thus the division
between "hardware" and "software" began with abstraction being used to deal
with the complexity of computing.

Programming languages started to appear in the early 1950s[9] and this was
also another major step in abstraction. Major languages such as Fortran,
ALGOL, and COBOL were released in the late 1950s to deal with scientific,
algorithmic, and business problems respectively. Edsger W. Dijkstra wrote his
seminal paper, "Go To Statement Considered Harmful",[10] in 1968 and David
Parnas introduced the key concept of modularity and information hiding in
1972[11] to help programmers deal with the ever-increasing complexity of
software systems.

The origins of the term "software engineering" have been attributed to
different sources. The term "software engineering" was used in the August 1966
issue of Communications of the ACM (Volume 9, number 8) “letter to the ACM
membership” by the ACM President Anthony A. Oettinger.[12] More commonly it is
traced to the title of a seminal NATO conference in 1968 by Professor F.L.
Bauer, the first conference on software engineering.[13] The conference was
attended by international experts on software who agreed on defining best
practices for software grounded in the application of engineering. The result
of the conference is a report that defines how software should be developed.
The original report is publicly available.[14] The field also gives credit to
the many works of Barry Boehm for its development and spread.[15]

The discipline of software engineering was created to address poor quality of
software, get projects exceeding time and budget under control, and ensure
that software is built systematically, rigorously, measurably, on time, on
budget, and within specification.[16] Engineering already addresses all these
issues, hence the same principles used in engineering can be applied to
software. The widespread lack of best practices for software at the time was
perceived as a "software crisis".[17][18][19]

Barry W. Boehm documented several key advances to the field in his 1981 book,
'Software Engineering Economics'.[20] These include his Constructive Cost
Model (COCOMO), which relates software development effort for a program, in
man-years T, to _source lines of code_ (SLOC).  T = k ∗ ( S L O C ) ( 1 + x )
{\displaystyle T=k*(SLOC)^{(1+x)}} The book analyzes sixty-three software
projects and concludes the cost of fixing errors escalates as the project
moves toward field use. The book also asserts that the key driver of software
cost is the capability of the software development team.

In 1984, the Software Engineering Institute (SEI) was established as a
federally funded research and development center headquartered on the campus
of Carnegie Mellon University in Pittsburgh, Pennsylvania, United States.
Watts Humphrey founded the SEI Software Process Program, aimed at
understanding and managing the software engineering process. His 1989 book,
Managing the Software Process,[21] asserts that the Software Development
Process can and should be controlled, measured, and improved. The Process
Maturity Levels introduced would become the Capability Maturity Model
Integration for Development(CMMi-DEV), which has defined how the US Government
evaluates the abilities of a software development team.

Modern, generally accepted best-practices for software engineering have been
collected by the ISO/IEC JTC 1/SC 7 subcommittee and published as the Software
Engineering Body of Knowledge (SWEBOK).[22]

## Subdisciplines[edit]

Software engineering can be divided into sub-disciplines.[23] Some of them
are:

  * Software requirements[1][23] (or Requirements engineering): The elicitation, analysis, specification, and validation of requirements for software.
  * Software design:[1][23] The process of defining the architecture, components, interfaces, and other characteristics of a system or component. It is also defined as the result of that process.
  * Software construction:[1][23] The detailed creation of working, meaningful software through a combination of coding, verification, unit testing, integration testing, and debugging.
  * Software testing:[1][23] An empirical, technical investigation conducted to provide stakeholders with information about the quality of the product or service under test.
  * Software maintenance:[1][23] The totality of activities required to provide cost-effective support to software.
  * Software configuration management:[1][23] The identification of the configuration of a system at distinct points in time for the purpose of systematically controlling changes to the configuration, and maintaining the integrity and traceability of the configuration throughout the system life cycle.
  * Software engineering management:[1][23] The application of management activities—planning, coordinating, measuring, monitoring, controlling, and reporting—to ensure that the development and maintenance of software is systematic, disciplined, and quantified.
  * Software development process:[1][23] The definition, implementation, assessment, measurement, management, change, and improvement of the software life cycle process itself.
  * Software engineering models and methods[23] impose structure on software engineering with the goal of making that activity systematic, repeatable, and ultimately more success-oriented
  * Software quality[23]
  * Software engineering professional practice[23] is concerned with the knowledge, skills, and attitudes that software engineers must possess to practice software engineering in a professional, responsible, and ethical manner
  * Software engineering economics[23] is about making decisions related to software engineering in a business context
  * Computing foundations[23]
  * Mathematical foundations[23]
  * Engineering foundations[23]

## Education[edit]

Knowledge of computer programming is a prerequisite for becoming a software
engineer. In 2004 the IEEE Computer Society produced the SWEBOK, which has
been published as ISO/IEC Technical Report 1979:2004, describing the body of
knowledge that they recommend to be mastered by a graduate software engineer
with four years of experience.[24] Many software engineers enter the
profession by obtaining a university degree or training at a vocational
school. One standard international curriculum for undergraduate software
engineering degrees was defined by the CCSE, and updated in 2004.[25] A number
of universities have Software Engineering degree programs; as of 2010[update],
there were 244 Campus Bachelor of Software Engineering programs, 70 Online
programs, 230 Masters-level programs, 41 Doctorate-level programs, and 69
Certificate-level programs in the United States.[26]

In addition to university education, many companies sponsor internships for
students wishing to pursue careers in information technology. These
internships can introduce the student to interesting real-world tasks that
typical software engineers encounter every day. Similar experience can be
gained through military service in software engineering.

## Profession[edit]

Main articles: Software engineer and Software engineering professionalism

Legal requirements for the licensing or certification of professional software
engineers vary around the world. In the UK, there is no licensing or legal
requirement to assume or use the job title Software Engineer. In some areas of
Canada, such as Alberta, British Columbia, Ontario,[27] and Quebec, software
engineers can hold the Professional Engineer (P.Eng) designation and/or the
Information Systems Professional (I.S.P.) designation. In Canada, there is a
legal requirement to have P.Eng when one wants to use the title "engineer" or
practice "software engineering". In Europe, Software Engineers can obtain the
European Engineer (EUR ING) professional title.

The United States, since 2013, has offered an _NCEES_ _Professional Engineer_
exam for Software Engineering, thereby allowing Software Engineers to be
licensed and recognized.[28] Mandatory licensing is currently still largely
debated, and perceived as controversial. In some parts of the US such as
Texas, the use of the term Engineer is regulated by law and reserved only for
use by individuals who have a Professional Engineer license.

The IEEE Computer Society and the ACM, the two main US-based professional
organizations of software engineering, publish guides to the profession of
software engineering. The IEEE's _Guide to the Software Engineering Body of
Knowledge - 2004 Version_ , or SWEBOK, defines the field and describes the
knowledge the IEEE expects a practicing software engineer to have. The most
current SWEBOK v3 is an updated version and was released in 2014.[29] The IEEE
also promulgates a "Software Engineering Code of Ethics".[30]

### Employment[edit]

In November 2004, the U. S. Bureau of Labor Statistics counted 760,840
software engineers holding jobs in the U.S.; in the same time period there
were some 1.4 million practitioners employed in the U.S. in all other
engineering disciplines combined.[31] Due to its relative newness as a field
of study, formal education in software engineering is often taught as part of
a computer science curriculum, and many software engineers hold computer
science degrees and have no engineering background whatsoever.[32]

Many software engineers work as employees or contractors. Software engineers
work with businesses, government agencies (civilian or military), and non-
profit organizations. Some software engineers work for themselves as
freelancers. Some organizations have specialists to perform each of the tasks
in the software development process. Other organizations require software
engineers to do many or all of them. In large projects, people may specialize
in only one role. In small projects, people may fill several or all roles at
the same time. Specializations include: in industry (analysts, architects,
developers, testers, technical support, middleware analysts, managers) and in
academia (educators, researchers).

Most software engineers and programmers work 40 hours a week, but about 15
percent of software engineers and 11 percent of programmers worked more than
50 hours a week in 2008. Injuries in these occupations are rare. However, like
other workers who spend long periods in front of a computer terminal typing at
a keyboard, engineers and programmers are susceptible to eyestrain, back
discomfort, and hand and wrist problems such as carpal tunnel syndrome.[33]

The field's future looks bright according to Money Magazine and Salary.com,
which rated Software Engineer as the best job in the United States in
2006.[34] In 2012, software engineering was again ranked as the best job in
the United States, this time by CareerCast.com.[35]

### Certification[edit]

The Software Engineering Institute offers certifications on specific topics
like security, process improvement and software architecture.[36] Apple, IBM,
Microsoft and other companies also sponsor their own certification
examinations. Many IT certification programs are oriented toward specific
technologies, and managed by the vendors of these technologies.[37] These
certification programs are tailored to the institutions that would employ
people who use these technologies.

Broader certification of general software engineering skills is available
through various professional societies. As of 2006[update], the IEEE had
certified over 575 software professionals as a Certified Software Development
Professional (CSDP).[38] In 2008 they added an entry-level certification known
as the Certified Software Development Associate (CSDA).[39] The ACM had a
professional certification program in the early 1980s,[ _citation needed_ ]
which was discontinued due to lack of interest. The ACM examined the
possibility of professional certification of software engineers in the late
1990s, but eventually decided that such certification was inappropriate for
the professional industrial practice of software engineering.[40]

In the U.K. the British Computer Society has developed a legally recognized
professional certification called _Chartered IT Professional (CITP)_ ,
available to fully qualified members ( _MBCS_ ). Software engineers may be
eligible for membership of the Institution of Engineering and Technology and
so qualify for Chartered Engineer status. In Canada the Canadian Information
Processing Society has developed a legally recognized professional
certification called _Information Systems Professional (ISP)_.[41] In Ontario,
Canada, Software Engineers who graduate from a _Canadian Engineering
Accreditation Board (CEAB)_ accredited program, successfully complete PEO's (
_Professional Engineers Ontario_ ) Professional Practice Examination (PPE) and
have at least 48 months of acceptable engineering experience are eligible to
be licensed through the _Professional Engineers Ontario_ and can become
Professional Engineers P.Eng.[42] The PEO does not recognize any online or
distance education however; and does not consider Computer Science programs to
be equivalent to software engineering programs despite the tremendous overlap
between the two. This has sparked controversy and a certification war. It has
also held the number of P.Eng holders for the profession exceptionally low.
The vast majority of working professionals in the field hold a degree in CS,
not SE. Given the difficult certification path for holders of non-SE degrees,
most never bother to pursue the license.

###  Impact of globalization[edit]

The initial impact of outsourcing, and the relatively lower cost of
international human resources in developing third world countries led to a
massive migration of software development activities from corporations in
North America and Europe to India and later: China, Russia, and other
developing countries. This approach had some flaws, mainly the distance /
timezone difference that prevented human interaction between clients and
developers and the massive job transfer. This had a negative impact on many
aspects of the software engineering profession. For example, some students in
the developed world avoid education related to software engineering because of
the fear of offshore outsourcing (importing software products or services from
other countries) and of being displaced by foreign visa workers.[43] Although
statistics do not currently show a threat to software engineering itself; a
related career, computer programming does appear to have been
affected.[44][45] Nevertheless, the ability to smartly leverage offshore and
near-shore resources via the follow-the-sun workflow has improved the overall
operational capability of many organizations.[46] When North Americans are
leaving work, Asians are just arriving to work. When Asians are leaving work,
Europeans are arriving to work. This provides a continuous ability to have
human oversight on business-critical processes 24 hours per day, without
paying overtime compensation or disrupting a key human resource, sleep
patterns.

While global outsourcing has several advantages, global - and generally
distributed - development can run into serious difficulties resulting from the
distance between developers. This is due to the key elements of this type of
distance that have been identified as geographical, temporal, cultural and
communication (that includes the use of different languages and dialects of
English in different locations).[47] Research has been carried out in the area
of global software development over the last 15 years and an extensive body of
relevant work published that highlights the benefits and problems associated
with the complex activity. As with other aspects of software engineering
research is ongoing in this and related areas.

## Related fields[edit]

Software engineering is a direct sub-field of engineering and has an overlap
with computer science and management science[ _citation needed_ ]. It is also
considered a part of overall systems engineering.

### Computer Science[edit]

|

**This section needs expansion**.  You can help by adding to it. _(July 2017)_  
  
---|---  
  
In general, software engineering focuses more on techniques for the
application of software development in industry,[48][49] while computer
science focuses more on algorithms and theory.[50]

## Controversy[edit]

### Over definition[edit]

Typical formal definitions of **software engineering** are:

  * "the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software".[5]
  * "an engineering discipline that is concerned with all aspects of software production"[6]
  * "the establishment and use of sound engineering principles in order to economically obtain software that is reliable and works efficiently on real machines"[7]

The term has been used less formally:

  * as the informal contemporary term for the broad range of activities that were formerly called computer programming and systems analysis;[51]
  * as the broad term for all aspects of the _practice_ of computer programming, as opposed to the _theory_ of computer programming, which is called computer science;[52]
  * as the term embodying the _advocacy_ of a specific approach to computer programming, one that urges that it be treated as an engineering discipline rather than an art or a craft, and advocates the codification of recommended practices.[53]

###  Criticism[edit]

Software engineering sees its practitioners as individuals who follow well-
defined engineering approaches to problem-solving. These approaches are
specified in various software engineering books and research papers, always
with the connotations of predictability, precision, mitigated risk and
professionalism. This perspective has led to calls for licensing,
certification and codified bodies of knowledge as mechanisms for spreading the
engineering knowledge and maturing the field.

Software craftsmanship has been proposed by a body of software developers as
an alternative that emphasizes the coding skills and accountability of the
software developers themselves without professionalism or any prescribed
curriculum leading to ad-hoc problem-solving (craftmanship) without
engineering (lack of predictability, precision, missing risk mitigation,
methods are informal and poorly defined). The Software Craftsmanship Manifesto
extends the Agile Software Manifesto[54] and draws a metaphor between modern
software development and the apprenticeship model of medieval Europe.

Software engineering extends engineering and draws on the engineering model,
i.e. engineering process, engineering project management, engineering
requirements, engineering design, engineering construction, and engineering
validation. The concept is so new that it is rarely understood, and it is
widely misinterpreted, including in software engineering textbooks, papers,
and among the communities of programmers and crafters.

One of the core issues in software engineering is that its approaches are not
empirical enough because a real-world validation of approaches is usually
absent, or very limited and hence software engineering is often misinterpreted
as feasible only in a "theoretical environment."

Dijkstra who developed computer languages in the 20th century refuted the
concepts of "software engineering" that was prevalent in the 1980s, arguing
that those terms were poor analogies for what he called the "radical novelty"
of computer science:

> A number of these phenomena have been bundled under the name "Software
Engineering". As economics is known as "The Miserable Science", software
engineering should be known as "The Doomed Discipline", doomed because it
cannot even approach its goal since its goal is self-contradictory. Software
engineering, of course, presents itself as another worthy cause, but that is
eyewash: if you carefully read its literature and analyse what its devotees
actually do, you will discover that software engineering has accepted as its
charter "How to program if you cannot."[55]

## See also[edit]

  * Software portal
  * Software Testing portal

Main article: Outline of software engineering

  * Bachelor of Science in Information Technology
  * Bachelor of Software Engineering
  * List of software engineering conferences
  * List of software engineering publications
  * Software craftsmanship
  * Software Engineering Institute

## Notes[edit]

  1. ^ _**a**_ _**b**_ _**c**_ _**d**_ _**e**_ _**f**_ _**g**_ _**h**_ _**i**_ Abran et al. 2004, pp. 1–1
  2. **^** ACM (2007). "Computing Degrees & Careers". ACM. Retrieved 2010-11-23. 
  3. **^** Laplante, Phillip (2007). _What Every Engineer Should Know about Software Engineering_. Boca Raton: CRC. ISBN 978-0-8493-7228-5. Retrieved  2011-01-21. 
  4. **^** _Systems and software engineering - Vocabulary_ , ISO/IEC/IEEE std 24765:2010(E), 2010.
  5. ^ _**a**_ _**b**_ _IEEE Standard Glossary of Software Engineering Terminology_ , IEEE std 610.12-1990, 1990.
  6. ^ _**a**_ _**b**_ Sommerville, Ian (2007) [1982]. "1.1.2 What is software engineering?". _Software Engineering_ (8th ed.). Harlow, England: Pearson Education. p. 7\. ISBN 0-321-31379-8.  Software engineering is an engineering discipline that is concerned with all aspects of software production from the early stages of system specification to maintaining the system after it has gone into use. In this definition, there are two key phrases:  
1\. _Engineering discipline_ Engineers make things work. They apply theories,
methods and tools where these are appropriate [. . .] Engineers also recognize
that they must work to organizational and financial constraints. [. . .]  
2\. _All aspects of software production_ Software engineering is not just
concerned with the technical processes of software development but also with
activities such as software project management and with the development of
tools, methods and theories to support software production.

  7. ^ _**a**_ _**b**_ "Software Engineering". _Information Processing_. North-Holland Publishing Co.year = 1972. **71** : 530–538. 
  8. **^** Leondes (2002). _intelligent systems: technology and applications_. CRC Press. p.  I-6. ISBN 978-0-8493-1121-5. 1.4 Computers and a First Glimpse at Al (1940s) 
  9. **^** Campbell-Kelly, Martin (April 1982). "The Development of Computer Programming in Britain (1945 to 1955)". _IEEE Annals of the History of Computing_. **4** (2): 121–139. doi:10.1109/MAHC.1982.10016.   `|access-date=` requires `|url=` (help)
  10. **^** Dijkstra, E. W. (March 1968). "Go To Statement Considered Harmful" (PDF). _Communications of the ACM_. **11** (3): 147–148. doi:10.1145/362929.362947. Retrieved  2009-08-10. 
  11. **^** Parnas, David (December 1972). "On the Criteria To Be Used in Decomposing Systems into Modules". _Communications of the ACM_. **15** (12): 1053–1058. doi:10.1145/361598.361623. Retrieved  2008-12-26. 
  12. **^** "The origin of "software engineering "". Retrieved 17 Nov 2017. 
  13. **^** Randall, Brian. "The 1968/69 NATO Software Engineering Reports". Retrieved 17 Nov 2017. 
  14. **^** "Software Engineering" (PDF). 
  15. **^** Selby, Richard. _Software Engineering: Barry W. Boehm's Lifetime Contributions to Software Development, Management, and Research_. ISBN 978-0470148730.  
  16. **^** Tedre, Matti (2014). _Science of Computing: Shaping a Discipline_. CRC Press. ISBN 978-1482217698.  
  17. **^** Sommerville 2008, p. 26
  18. **^** Peter, Naur; Randell, Brian (7–11 October 1968). _Software Engineering: Report of a conference sponsored by the NATO Science Committee_ (PDF). Garmisch, Germany: Scientific Affairs Division, NATO. Retrieved 2008-12-26. 
  19. **^** Randell, Brian (10 August 2001). "The 1968/69 NATO Software Engineering Reports". _Brian Randell's University Homepage_. The School of the Computer Sciences, Newcastle University. Retrieved  2008-10-11. The idea for the first NATO Software Engineering Conference, and in particular that of adopting the then practically unknown term "software engineering" as its (deliberately provocative) title, I believe came originally from Professor Fritz Bauer. 
  20. **^** Boehm (1981). _Software Engineering Economics_. Prentice-Hall. ISBN 0-13-822122-7.  
  21. **^** Humphrey, Watts S. (1989). _Managing the Software Process_. Addison-Wesley. ISBN 0-201-18095-2.  
  22. **^** "ISO/IEC TR 19759:2005". Retrieved  2012-04-01. 
  23. ^ _**a**_ _**b**_ _**c**_ _**d**_ _**e**_ _**f**_ _**g**_ _**h**_ _**i**_ _**j**_ _**k**_ _**l**_ _**m**_ _**n**_ _**o**_ _**p**_ "Software Engineering Body of Knowledge (SWEBOK Version 3), 2014" (pdf). _www.swebok.org_. IEEE Computer Society. Retrieved  24 May 2016. 
  24. **^** Abran, Alain, ed. (2005) [2004]. "Chapter 1: Introduction to the Guide". _Guide to the Software Engineering Body of Knowledge_. Los Alamitos: IEEE Computer Society. ISBN 0-7695-2330-7. Retrieved  2010-09-13. The total volume of cited literature is intended to be suitable for mastery through the completion of an undergraduate education plus four years of experience. 
  25. **^** "SE2004 Software Engineering Curriculum". Sites.computer.org. 2003-09-30. Retrieved  2012-03-25. 
  26. **^** [1] Degree programs in Software Engineering
  27. **^** Williams, N.S.W. (19–21 February 2001). "Professional Engineers Ontario's approach to licensing software engineering practitioners". _Software Engineering Education and Training, 2001 Proceedings. 14th Conference on_. Charlotte, NC: IEEE. pp. 77–78.  
  28. **^** "NCEES Software Engineering Exam Specifications" (PDF). Retrieved 2012-04-01. 
  29. **^** " 'SWEBOK Guide Version 3'". Retrieved 2015-03-09. 
  30. **^** " ''Software Engineering Code of Ethics''" (PDF). Retrieved 2012-03-25. 
  31. **^** Bureau of Labor Statistics, U.S. Department of Labor, _USDL 05-2145: Occupational Employment and Wages, November 2004_, Table 1.
  32. **^** "Software Engineering". Retrieved  2008-02-01. 
  33. **^** "Computer Software Engineers and Computer Programmers". Retrieved  2009-12-17. 
  34. **^** Kalwarski, Tara; Daphne Mosher; Janet Paskin; Donna Rosato (2006). "Best Jobs in America". _MONEY Magazine_. CNN. Retrieved  2006-04-20. 
  35. **^** "Best and Worst Jobs of 2012". online.wsj.com. Retrieved  2017-11-03. 
  36. **^** "SEI certification page". Sei.cmu.edu. Retrieved  2012-03-25. 
  37. **^** Wyrostek, Warren (March 14, 2008). "The Top 10 Problems with IT Certification in 2008". _InformIT_. Retrieved  2009-03-03. 
  38. **^** IEEE Computer Society. "2006 IEEE computer society report to the IFIP General Assembly" (PDF). Retrieved 2007-04-10. 
  39. **^** IEEE. "CSDA". Retrieved 2010-04-20. 
  40. **^** ACM (July 17, 2000). "A Summary of the ACM Position on Software Engineering as a Licensed Engineering Profession" (PDF). Association for Computing Machinery (ACM). Archived from the original (PDF) on May 17, 2008. Retrieved 2009-03-03. At its meeting in May 2000, the Council further concluded that the framework of a licensed professional engineer, originally developed for civil engineers, does not match the professional industrial practice of software engineering. Such licensing practices would give false assurances of competence even if the body of knowledge were mature; and would preclude many of the most qualified software engineers from becoming licensed. 
  41. **^** Canadian Information Processing Society. "I.S.P. Designation". Retrieved 2007-03-15. 
  42. **^** "Professional Engineers Ontario: Welcome to PEO's website". Peo.on.ca. Retrieved  2012-03-25. 
  43. **^** Thibodaux, Patrick (2006-05-05). "As outsourcing gathers steam, computer science interest wanes". Computerworld.com. Retrieved 2016-12-06. 
  44. **^** "Computer Programmers". Bls.gov. Retrieved  2012-03-25. 
  45. **^** Mullins, Robert (2007-03-13). "Software developer growth slows in North America". InfoWorld. Retrieved 2012-03-25. 
  46. **^** "Gartner Magic Quadrant" (PDF). Cognizant.com. Retrieved 2012-03-25. 
  47. **^** Casey, Valentine (2010-08-20). "Virtual software team project management". Springer. Retrieved 2013-12-06. 
  48. **^** http://www.stevemcconnell.com/psd/04-senotcs.htm
  49. **^** https://engiegirlsatuwaterloo.wordpress.com/2013/08/29/computer-engineering-software-engineering-or-computer-science/
  50. **^** https://www.upwork.com/hiring/development/computer-science-vs-computer-engineering/
  51. **^** Akram I. Salah (2002-04-05). "Engineering an Academic Program in Software Engineering" (PDF). 35th Annual Midwest Instruction and Computing Symposium. Retrieved 2006-09-13. : "For some, software engineering is just a glorified name for programming. If you are a programmer, you might put 'software engineer' on your business card—never 'programmer' though."
  52. **^** Mills, Harlan D., J. R. Newman, and C. B. Engle, Jr., "An Undergraduate Curriculum in Software Engineering," in Deimel, Lionel E. (1990). _Software Engineering Education: SEI Conference 1990, Pittsburgh, Pennsylvania, USA, April 2–3,._. Springer. ISBN 0-387-97274-9.  ,p. 26: "As a practical matter, we regard software engineering as the necessary preparation for the practicing, software development and maintenance professional. The Computer Scientist is preparing for further theoretical studies..."
  53. **^** David Budgen; Pearl Brereton; Barbara Kitchenham; Stephen Linkman (2004-12-14). "Realizing Evidence-based Software Engineering". Retrieved 2006-10-18. : "We believe that software engineering can only advance as an engineering discipline by moving away from its current dependence upon advocacy and analysis,...."
  54. **^** Beck, Kent; et al. (2001). "Manifesto for Agile Software Development". Agile Alliance. Retrieved  14 June 2010. 
  55. **^** Dijkstra, E. W. (1988). "On the cruelty of really teaching computing science". Retrieved  2014-01-10. 

## References[edit]

  * Abran, Alain; Moore, James W.; Bourque, Pierre; Dupuis, Robert; Tripp, Leonard L. (2004). _Guide to the Software Engineering Body of Knowledge_. IEEE. ISBN 0-7695-2330-7.  
  * Sommerville, Ian (2008). _Software Engineering_ (7 ed.). Pearson Education. ISBN 978-81-7758-530-8. Retrieved  10 January 2013. 

## Further reading[edit]

  * Pressman, Roger S (2009). _Software Engineering: A Practitioner's Approach_ (7th ed.). Boston, Mass: McGraw-Hill. ISBN 978-0073375977.  
  * Sommerville, Ian (2010) [2010]. _Software Engineering_ (9th ed.). Harlow, England: Pearson Education. ISBN 978-0137035151.  
  * Jalote, Pankaj (2005) [1991]. _An Integrated Approach to Software Engineering_ (3rd ed.). Springer. ISBN 0-387-20881-X.  
  * Bruegge, Bernd; Dutoit, Allen (2009). _Object-oriented software engineering  : using UML, patterns, and Java_ (3rd ed.). Prentice Hall. ISBN 978-0136061250. 

## External links[edit]

| Wikimedia Commons has media related to _**Software engineering**_.  
---|---  
|  Wikibooks has a book on the topic of: _**Introduction to Software
Engineering**_  
---|---  
|  Wikiversity has learning resources about _**Software engineering**_  
---|---  
  
  * Guide to the Software Engineering Body of Knowledge
  * The Open Systems Engineering and Software Development Life Cycle Framework OpenSDLC.org the integrated Creative Commons SDLC
  * Software Engineering Institute Carnegie Mellon
  * Learn Software Engineering Software Engineering Society

  * v
  * t
  * e

Software engineering  
  
---  
Fields |

  * Computer programming
  * Requirements engineering
  * Software deployment
  * Software design
  * Software maintenance
  * Software testing
  * Systems analysis
  * Formal methods

  
  
Concepts |

  * Data modeling
  * Enterprise architecture
  * Functional specification
  * Modeling language
  * Orthogonality
  * Programming paradigm
  * Software
  * Software archaeology
  * Software architecture
  * Software configuration management
  * Software development methodology
  * Software development process
  * Software quality
  * Software quality assurance
  * Software verification and validation
  * Structured analysis

  
  
Orientations |

  * Agile
  * Aspect-oriented
  * Object orientation
  * Ontology
  * Service orientation
  * SDLC

  
  
Models |

| Developmental |

  * Agile
  * EUP
  * Executable UML
  * Incremental model
  * Iterative model
  * Prototype model
  * RAD
  * UP
  * Scrum
  * Spiral model
  * V-Model
  * Waterfall model
  * XP

  
  
---|---  
Other |

  * SPICE
  * CMMI
  * Data model
  * ER model
  * Function model
  * Information model
  * Metamodeling
  * Object model
  * Systems model
  * View model

  
  
Languages |

  * IDEF
  * UML
  * USL
  * SysML

  
  
Software  
engineers

|

  * Victor Basili
  * Kent Beck
  * Grady Booch
  * Fred Brooks
  * Barry Boehm
  * Peter Chen
  * Danese Cooper
  * Ward Cunningham
  * Tom DeMarco
  * Edsger W. Dijkstra
  * Delores M. Etter
  * Martin Fowler
  * Adele Goldstine
  * Margaret Hamilton
  * C. A. R. Hoare
  * Lois Haibt
  * Mary Jean Harrold
  * Grace Hopper
  * Watts Humphrey
  * Michael A. Jackson
  * Ivar Jacobson
  * Alan Kay
  * Nancy Leveson
  * Stephen J. Mellor
  * Bertrand Meyer
  * David Parnas
  * Trygve Reenskaug
  * Winston W. Royce
  * James Rumbaugh
  * Mary Shaw
  * Peri Tarr
  * Elaine Weyuker
  * Niklaus Wirth
  * Edward Yourdon

  
  
Related fields |

  * Computer science
  * Computer engineering
  * Project management
  * Risk management
  * Systems engineering

  
  
  * Category
  * Commons

  
  
  * v
  * t
  * e

Systems engineering  
  
---  
Subfields |

  * Aerospace engineering
  * Biological systems engineering
  * Configuration management
  * Earth systems engineering and management
  * Electrical engineering
  * Enterprise systems engineering
  * Performance engineering
  * Reliability engineering
  * Safety engineering

  
  
Processes |

  * Requirements engineering
  * Functional specification
  * System integration
  * Verification and validation
  * Design review

  
  
Concepts |

  * Business process
  * System
  * System lifecycle
  * V-Model
  * Systems development life cycle

  
  
Tools |

  * Decision-making
  * Function modelling
  * IDEF
  * Optimization
  * Quality function deployment
  * System dynamics
  * Systems Modeling Language
  * Systems analysis
  * Systems modeling
  * Work breakdown structure

  
  
People |

  * James S. Albus
  * Ruzena Bajcsy
  * Benjamin S. Blanchard
  * Wernher von Braun
  * Kathleen Carley
  * Harold Chestnut
  * Wolt Fabrycky
  * Barbara Grosz
  * Arthur David Hall III
  * Derek Hitchins
  * Robert E. Machol
  * Radhika Nagpal
  * Simon Ramo
  * Joseph Francis Shea
  * Katia Sycara
  * Manuela M. Veloso
  * John N. Warfield

  
  
Related fields |

  * Control engineering
  * Computer engineering
  * Industrial engineering
  * Operations research
  * Project management
  * Quality management
  * Risk management
  * Software engineering

  
  
  * Category

  
  
  * v
  * t
  * e

Engineering  
  
---  
Civil |

  * Architectural
  * Construction
  * Environmental
  * Earthquake
  * Geotechnical
  * Hydraulic
  * Mining
  * Structural
  * Transportation

  
  
Mechanical |

  * Acoustical
  * Aerospace
  * Automotive
  * Marine
  * Mechatronics
  * Railway

  
  
Electrical |

  * Computer
  * Control
  * Electromechanics
  * Electronics
  * Microwaves
  * Power
  * Radio Frequency
  * Telecommunications

  
  
Chemical |

  * Biochemical
  * Biological
  * Molecular
  * Petroleum
  * Process
  * Reaction
  * Thermodynamics
  * Transport phenomena

  
  
Interdisciplinarity |

  * Audio
  * Biomedical
  * Ceramics
  * Engineering mathematics
  * Engineering mechanics
  * Engineering science
  * Fire
  * Industrial
  * Materials science
  * Metallurgy
  * Military
  * Nanotechnology
  * Nuclear
  * Optical
  * Photonics
  * Privacy
  * Robotics
  * Security
  * Systems

  
  
  * List of engineering branches
  * **Category:Engineering**
  * **Engineering portal**

  
  
  * v
  * t
  * e

Major fields of computer science  
  
---  
  
Note: This template roughly follows the 2012 ACM Computing Classification
System.  
  
Hardware |

  * Printed circuit board
  * Peripheral
  * Integrated circuit
  * Very-large-scale integration
  * Energy consumption
  * Electronic design automation

  
  
Computer systems  
organization |

  * Computer architecture
  * Embedded system
  * Real-time computing
  * Dependability

  
  
Networks |

  * Network architecture
  * Network protocol
  * Network components
  * Network scheduler
  * Network performance evaluation
  * Network service

  
  
Software organization |

  * Interpreter
  * Middleware
  * Virtual machine
  * Operating system
  * Software quality

  
  
Software notations  
and tools |

  * Programming paradigm
  * Programming language
  * Compiler
  * Domain-specific language
  * Modeling language
  * Software framework
  * Integrated development environment
  * Software configuration management
  * Software library
  * Software repository

  
  
Software development |

  * Software development process
  * Requirements analysis
  * Software design
  * Software construction
  * Software deployment
  * Software maintenance
  * Programming team
  * Open-source model

  
  
Theory of computation |

  * Model of computation
  * Formal language
  * Automata theory
  * Computational complexity theory
  * Logic
  * Semantics

  
  
Algorithms |

  * Algorithm design
  * Analysis of algorithms
  * Randomized algorithm
  * Computational geometry

  
  
Mathematics  
of computing |

  * Discrete mathematics
  * Probability
  * Statistics
  * Mathematical software
  * Information theory
  * Mathematical analysis
  * Numerical analysis

  
  
Information  
systems |

  * Database management system
  * Information storage systems
  * Enterprise information system
  * Social information systems
  * Geographic information system
  * Decision support system
  * Process control system
  * Multimedia information system
  * Data mining
  * Digital library
  * Computing platform
  * Digital marketing
  * World Wide Web
  * Information retrieval

  
  
Security |

  * Cryptography
  * Formal methods
  * Security services
  * Intrusion detection system
  * Hardware security
  * Network security
  * Information security
  * Application security

  
  
Human–computer  
interaction |

  * Interaction design
  * Social computing
  * Ubiquitous computing
  * Visualization
  * Accessibility

  
  
Concurrency |

  * Concurrent computing
  * Parallel computing
  * Distributed computing
  * Multithreading
  * Multiprocessing

  
  
Artificial  
intelligence |

  * Natural language processing
  * Knowledge representation and reasoning
  * Computer vision
  * Automated planning and scheduling
  * Search methodology
  * Control method
  * Philosophy of artificial intelligence
  * Distributed artificial intelligence

  
  
Machine learning |

  * Supervised learning
  * Unsupervised learning
  * Reinforcement learning
  * Multi-task learning
  * Cross-validation

  
  
Graphics |

  * Animation
  * Rendering
  * Image manipulation
  * Graphics processing unit
  * Mixed reality
  * Virtual reality
  * Image compression
  * Solid modeling

  
  
Applied  
computing |

  * E-commerce
  * Enterprise software
  * Computational mathematics
  * Computational physics
  * Computational chemistry
  * Computational biology
  * Computational social science
  * Computational engineering
  * Computational healthcare
  * Digital art
  * Electronic publishing
  * Cyberwarfare
  * Electronic voting
  * Video game
  * Word processing
  * Operations research
  * Educational technology
  * Document management

  
  
  * **Book**
  * **Category**
  * **Portal**
  * **WikiProject**
  * **Commons**

  
  
Authority control |

  * LCCN: sh87007398
  * GND: 4116521-4
  * BNF: cb11966616k (data)
  * NDL: 01014113
  * BNE: XX541523

  
  
---|---  
  
Retrieved from
"https://en.wikipedia.org/w/index.php?title=Software_engineering&oldid=816172206"

Categories:

  * Software engineering
  * Engineering disciplines

Hidden categories:

  * Pages using citations with accessdate and no URL
  * Articles containing potentially dated statements from 2010
  * All articles containing potentially dated statements
  * Articles containing potentially dated statements from 2006
  * All articles with unsourced statements
  * Articles with unsourced statements from March 2009
  * Articles with unsourced statements from December 2014
  * Articles to be expanded from July 2017
  * All articles to be expanded
  * Articles using small message boxes
  * Wikipedia articles with LCCN identifiers
  * Wikipedia articles with GND identifiers
  * Wikipedia articles with BNF identifiers

## Navigation menu

### Personal tools

  * Not logged in
  * Talk
  * Contributions
  * Create account
  * Log in

### Namespaces

  * Article
  * Talk

###  Variants

### Views

  * Read
  * Edit
  * View history

### More

###  Search

### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article
  * Donate to Wikipedia
  * Wikipedia store

### Interaction

  * Help
  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact page

### Tools

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Permanent link
  * Page information
  * Wikidata item
  * Cite this page

### Print/export

  * Create a book
  * Download as PDF
  * Printable version

### In other projects

  * Wikimedia Commons
  * Wikibooks
  * Wikiquote
  * Wikiversity

### Languages

  * Afrikaans
  * አማርኛ
  * العربية
  * Asturianu
  * Azərbaycanca
  * বাংলা
  * Български
  * Bosanski
  * Català
  * Čeština
  * Cymraeg
  * Dansk
  * Deutsch
  * Ελληνικά
  * Español
  * Esperanto
  * Euskara
  * فارسی
  * Français
  * Gaeilge
  * Gaelg
  * Galego
  * 한국어
  * Հայերեն
  * हिन्दी
  * Hrvatski
  * Bahasa Indonesia
  * Íslenska
  * Italiano
  * עברית
  * Kiswahili
  * Kurdî
  * ລາວ
  * Latviešu
  * Lietuvių
  * Македонски
  * മലയാളം
  * Bahasa Melayu
  * Mirandés
  * Монгол
  * Nederlands
  * 日本語
  * Norsk
  * Norsk nynorsk
  * ଓଡ଼ିଆ
  * ភាសាខ្មែរ
  * Polski
  * Português
  * Română
  * Русский
  * Scots
  * Shqip
  * සිංහල
  * Simple English
  * Slovenčina
  * کوردی
  * Српски / srpski
  * Srpskohrvatski / српскохрватски
  * Basa Sunda
  * Suomi
  * Tagalog
  * தமிழ்
  * ไทย
  * ትግርኛ
  * Türkçe
  * Українська
  * Tiếng Việt
  * Winaray
  * ייִדיש
  * 粵語
  * 中文

Edit links

  * This page was last edited on 19 December 2017, at 19:10.
  * Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.

  * Privacy policy
  * About Wikipedia
  * Disclaimers
  * Contact Wikipedia
  * Developers
  * Cookie statement
  * Mobile view

  *   * 

  *[FBS]: Football Bowl Subdivision
  *[FCS]: Football Championship Subdivision
  *[e]: Edit this template
  *[c.]: circa
  *[m.]: married
  *[Pop.]: Population
  *[ v]: View this template
  *[t]: Discuss this template
  *[v]: View this template
  *[1887]: April 22, 1887
  *[±%]: Percent change
  *[%±]: Percent change

